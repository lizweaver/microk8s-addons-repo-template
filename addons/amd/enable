#!/usr/bin/env python3

import os
import json
import pathlib
import subprocess
import click
import sys
import re
from typing import Optional

SNAP = pathlib.Path(os.getenv("SNAP") or "/snap/microk8s/current")
HELM = SNAP / "microk8s-helm3.wrapper"
KUBECTL = SNAP / "microk8s-kubectl.wrapper"
MICROK8S_ENABLE = SNAP / "microk8s-enable.wrapper"
    
def cert_manager_install():
    click.echo("Installing cert-manager")
    subprocess.run([HELM, "repo", "add", "jetstack", "https://charts.jetstack.io", "--force-update"])
    subprocess.run([
        HELM, 
        "install", 
        "cert-manager", 
        "jetstack/cert-manager", 
        "--namespace", 
        "cert-manager",
        "--create-namespace",
        "--version",
        "v1.15.1",
        "--set",
        "crds.enabled=true"
    ])

def deploy_gpu_operator(
    helm_set : list,
    helm_values: Optional[str] = None,
    version: Optional[str] = None,
):
    click.echo("Deploying AMD GPU Operator")

    subprocess.run([HELM, "repo", "add", "rocm", "https://rocm.github.io/gpu-operator"])
    subprocess.run([HELM, "repo", "update"])

    operator_args = [
        "install",
        "amd-gpu-operator",
        "rocm/gpu-operator-charts",
        "--namespace",
        "kube-amd-gpu",
        "--create-namespace"
    ]

    if version is not None:
        operator_args.extend(["--version", version])
    for set in helm_set:
        operator_args.extend(["--set", set])
    if helm_values is not None:
        operator_args.extend(["-f", helm_values])

    subprocess.run([HELM, *operator_args])
    

@click.command()
@click.option("--install-cert-manager", type=bool, default=True)
@click.option("--gpu-operator-version")
@click.option("--gpu-operator-set", multiple=True)
@click.option("--gpu-operator-values", type=click.Path(exists=True))
def main(
    install_cert_manager: bool,
    gpu_operator_version: Optional[str],
    gpu_operator_set: Optional[list],
    gpu_operator_values: Optional[str],
):
    if gpu_operator_version is not None:
        version_pattern = r'^v\d+\.\d+\.\d+$'
        if not bool(re.match(version_pattern, gpu_operator_version)):
            click.echo(f"ERROR: Invalid version string {gpu_operator_version}", err=True)
            sys.exit(1)

    subprocess.run([MICROK8S_ENABLE, "core/helm"])
    if install_cert_manager:
        cert_manager_install()
    deploy_gpu_operator(
        helm_set=gpu_operator_set, 
        helm_values=gpu_operator_values, 
        version=gpu_operator_version
    )

if __name__ == "__main__":
    main()
    